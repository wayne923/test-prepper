// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id              String @id @default(cuid())
  prompt          String
  topic           String // "algebra", "geometry", "word-problems"
  subTopic        String // "linear-equations", "circles", etc.
  difficulty      Int // 1-5
  isDiagnostic    Boolean @default(false)
  choices         Json // {"A": "5", "B": "10", "C": "15", "D": "20"}
  correctChoice   String // "A", "B", "C", or "D"
  explanation     String // Detailed explanation
  misconceptions  Json // {"B": "Common error...", "C": "This happens when..."}

  responses       Response[]
  boxes           LeitnerBox[]
}

model User {
  id        String @id @default(cuid())
  email     String? @unique
  name      String?
  createdAt DateTime @default(now())

  accounts  Account[]
  sessions  Session[]
  responses Response[]
  boxes     LeitnerBox[]
}

model Account {
  id                  String @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String @id @default(cuid())
  sessionToken  String @unique
  userId        String
  expires       DateTime
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Response {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id])
  questionId    String
  question      Question @relation(fields: [questionId], references: [id])
  selectedIdx   Int
  correct       Boolean
  msTaken       Int
  createdAt     DateTime @default(now())

  @@unique([userId, questionId, createdAt])
}

model LeitnerBox {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id])
  questionId    String
  question      Question @relation(fields: [questionId], references: [id])
  box           Int @default(0) // 0=new, 1=learning, 2=review, 3=mastered
  dueAt         DateTime @default(now())

  @@unique([userId, questionId])
}